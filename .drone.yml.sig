eyJhbGciOiJIUzI1NiJ9.I0lmIG1ha2luZyBjaGFuZ2VzIHRvIHRoaXMgZmlsZSwgc2lnbiB0aGUgZmlsZSBhbmQgcHVzaC4KcGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIHJlY3Vyc2l2ZTogdHJ1ZQogICAgc3VibW9kdWxlX292ZXJyaWRlOgogICAgICBhbnNpYmxlL3JvbGVzL2Rhc2hib2FyZC9maWxlcy9kYXNoYm9hcmQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9DQ0YtQ29yZS9vc3MtZGFzaGJvYXJkLmdpdAoKICBzY3A6CiAgICBpbWFnZTogY2Nmb3NzL2Ryb25lLXNjcAogICAgc2VydmVyOiAxMC4wLjUuNTIKICAgIHVzZXI6IHJvb3QKICAgIHRhcmdldDogL3RtcC9vc3MtZWxhc3RpYy1jbHVzdGVyLW5hdGl2ZQogICAgI0FkZCBzc2gga2V5IHRvIHNlY3JldHMKICAgICNkcm9uZSBzZWNyZXQgYWRkIC0taW1hZ2UgY2Nmb3NzL2Ryb25lLXNjcCBDQ0YtQ29yZS9vc3MtZWxhc3RpY2NsdXN0ZXItbmF0aXZlICBTU0hfUEtFWSBAL2hvbWUvY2xvdWQtdXNlci8uc3NoL2lkX3JzYQoKICB0ZXN0OgogICAgaW1hZ2U6IHBsdWdpbnMvc3NoCiAgICBob3N0OiAxMC4wLjUuNTIKICAgIHVzZXI6IGNsb3VkLXVzZXIKICAgIHBvcnQ6IDIyCiAgICBzY3JpcHQ6CiAgICAgIC0gY2QgL3RtcC9vc3MtZWxhc3RpYy1jbHVzdGVyLW5hdGl2ZS9hbnNpYmxlCiAgICAgIC0gYW5zaWJsZS1wbGF5Ym9vayBvcGVuc3RhY2sueW1sIC1pIGludmVudG9yeS91cy12YS91cy12YS55bWwgLS1saXN0LWhvc3RzCgogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICBjaGFubmVsOiBjb3JlLW9zcy1wcml2YXRlCiAgICB1c2VybmFtZTogZHJvbmUKICAgIHRlbXBsYXRlOiA-CiAgICAgIGJ1aWxkICN7eyBidWlsZC5udW1iZXIgfX0gZmluaXNoZWQgd2l0aCB7eyBidWlsZC5zdGF0dXMgfX0gc3RhdHVzCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICAjQWRkIHNlY3JldAogICAgI2Ryb25lIHNlY3JldCBhZGQgLS1pbWFnZSBwbHVnaW5zL3NsYWNrICBDQ0YtQ29yZS9lbGFzdGljLWNsdXN0ZXItbmF0aXZlICBQTFVHSU5fV0VCSE9PSyAgPHdlYmhvb2sgdXJsPg.uu-dX4yHGaYU7kYC0AUhnbsORupzhz3EFUyjWQFo_H8