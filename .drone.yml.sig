eyJhbGciOiJIUzI1NiJ9.I0lmIG1ha2luZyBjaGFuZ2VzIHRvIHRoaXMgZmlsZSwgc2lnbiB0aGUgZmlsZSBhbmQgcHVzaC4KcGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIHJlY3Vyc2l2ZTogdHJ1ZQogICAgc3VibW9kdWxlX292ZXJyaWRlOgogICAgICBhbnNpYmxlL3JvbGVzL2Rhc2hib2FyZC9maWxlcy9kYXNoYm9hcmQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9DQ0YtQ29yZS9vc3MtZGFzaGJvYXJkLmdpdAoKICBzY3A6CiAgICBpbWFnZTogY2Nmb3NzL2Ryb25lLXNjcAogICAgc2VydmVyOiAxMC4wLjUuNTIKICAgIHVzZXI6IHJvb3QKICAgIHRhcmdldDogL3RtcC9vc3MtZWxhc3RpYy1jbHVzdGVyLW5hdGl2ZQogICAgI0FkZCBzc2gga2V5IHRvIHNlY3JldHMKICAgICNkcm9uZSBzZWNyZXQgYWRkIC0taW1hZ2UgY2Nmb3NzL2Ryb25lLXNjcCBDQ0YtQ29yZS9vc3MtZWxhc3RpY2NsdXN0ZXItbmF0aXZlICBTU0hfUEtFWSBAL2hvbWUvY2xvdWQtdXNlci8uc3NoL2lkX3JzYQoKICB0ZXN0LWFuc2libGU6CiAgICBpbWFnZTogcGx1Z2lucy9zc2gKICAgIGhvc3Q6IDEwLjAuNS41MgogICAgdXNlcjogY2xvdWQtdXNlcgogICAgcG9ydDogMjIKICAgIHNjcmlwdDoKICAgICAgLSBjZCAvdG1wL29zcy1lbGFzdGljLWNsdXN0ZXItbmF0aXZlL2Fuc2libGUKICAgICAgLSBhbnNpYmxlLXBsYXlib29rIG9wZW5zdGFjay55bWwgLWkgaW52ZW50b3J5L3VzLXZhL3VzLXZhLnltbCAtLWxpc3QtaG9zdHMKCiAgdGVzdC1jbHVzdGVyOgogICAgaW1hZ2U6IGNjZm9zcy9kcm9uZS10ZXN0CiAgICBkZWZhdWx0X3Rlc3RzOiBlbGFzdGljc2VhcmNoLmJhdHMKICAgIGVzX2FwaV9pcF9wb3J0OiAxMC4wLjUuNzY6OTIwMAogICAgZXNfdXNlcjogZWxhc3RpYwogICAgZXNfcGFzc3dvcmQ6IGNoYW5nZW1lCgogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICBjaGFubmVsOiBjb3JlLW9zcy1wcml2YXRlCiAgICB1c2VybmFtZTogZHJvbmUKICAgIHRlbXBsYXRlOiA-CiAgICAgIGJ1aWxkICN7eyBidWlsZC5udW1iZXIgfX0gZmluaXNoZWQgd2l0aCB7eyBidWlsZC5zdGF0dXMgfX0gc3RhdHVzCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICAjQWRkIHNlY3JldAogICAgI2Ryb25lIHNlY3JldCBhZGQgLS1pbWFnZSBwbHVnaW5zL3NsYWNrICBDQ0YtQ29yZS9lbGFzdGljLWNsdXN0ZXItbmF0aXZlICBQTFVHSU5fV0VCSE9PSyAgPHdlYmhvb2sgdXJsPg.Np5lZt5zzqnnf3eiwZFix90XHGCfrPIAJTMUldbB_YA